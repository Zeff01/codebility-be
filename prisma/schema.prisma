generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "./ERD.pdf"
  theme    = "forest"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Users {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  pronoun           String?
  image_url         String?
  address           String?
  email_address     String            @unique
  phone_no          String?
  github_link       String?
  fb_link           String?
  linkedin_link     String?
  whatsapp_link     String?
  skype_link        String?
  telegram_link     String?
  portfolio_website String?
  tech_stacks       String[]
  about_me          String?
  education         String?
  password          String
  created_at        DateTime          @default(now())
  updated_at        DateTime          @default(now())
  position          String[]
  start_time        DateTime?
  end_time          DateTime?
  roleType          RoleTypeEnum      @default(INTERN)
  userType          UserTypeEnum      @default(APPLICANT)
  work_experience   Work_Experience[]
  org_chart         org_chart[]
  time_logs         time_logs[]
  todo_list         todo_list[]
  // projects          String[]          @db.ObjectId // IDs of related Projects
  clientId          String?           @db.ObjectId
  clients           Clients?          @relation(fields: [clientId], references: [id])
  points            Points[]
  prio              Int?
  UserProjects UserProjects[]
  // Other relations and fields...
  notes             Notes[]

  @@map("users")
}

model Work_Experience {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userWorkExpId     String   @db.ObjectId
  userWorkExp       Users    @relation(fields: [userWorkExpId], references: [id])
  position          String
  company           String
  dateFrom          String
  dateTo            String
  location          String
  task              String[]
  short_desc        String
  created_at        DateTime @default(now())
  updated_at        DateTime @default(now())

  @@map("work_experience")
}

model org_chart {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  userOrgChartId String        @db.ObjectId
  userOrgChart   Users         @relation(fields: [userOrgChartId], references: [id])
  level          Int           @unique
  org_hierarchy  Org_Hierarchy @relation(fields: [level], references: [level])
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @default(now()) @map("updated_at")

  @@map("org_chart")
}

model Org_Hierarchy {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  level     Int         @unique
  position  String
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @default(now()) @map("updated_at")
  org_chart org_chart[]

  @@map("org_hierarchy")
}

model time_logs {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  userTimeLogId      String    @db.ObjectId
  userTimeLog        Users     @relation(fields: [userTimeLogId], references: [id])
  time_in            DateTime?
  time_out           DateTime?
  total_worked_hours Int?
  total_late_hours   Int?
  total_ot_time      Int?
  scheduled_time_in  DateTime?
  scheduled_time_out DateTime?
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @default(now()) @map("updated_at")

  @@map("time_logs")
}

model todo_list {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  subheader        String?
  full_description String?
  userTodoId       String?           @db.ObjectId
  userTodo         Users?            @relation(fields: [userTodoId], references: [id])
  projectId        String?           @db.ObjectId
  projects         Projects?         @relation(fields: [projectId], references: [id])
  prio_level       PriorityLevelEnum
  github_link      String?
  created_at       DateTime          @default(now())
  updated_at       DateTime          @default(now())
  tagId            String[]          @db.ObjectId
  tags             Tags[]            @relation(fields: [tagId], references: [id])

  @@map("todo_list")
}

model Tags {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  tag        String
  created_at DateTime    @default(now())
  updated_at DateTime    @default(now())
  todoId     String[]    @db.ObjectId
  todo_list  todo_list[] @relation(fields: [todoId], references: [id])

  @@map("tags")
}

model Projects {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  project_name      String
  github_link       String
  summary           String?
  live_link         String?
  project_thumbnail String?
  createdAt         DateTime    @default(now()) @map("created_at")
  updatedAt         DateTime    @default(now()) @map("updated_at")
  //  users             String[]    @db.ObjectId // IDs of related Users
  clientId          String?     @db.ObjectId 
  client            Clients?    @relation(fields: [clientId], references: [id])
  todo_list         todo_list[]
  UserProjects UserProjects[]


  @@map("projects")
}

model UserProjects {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  user_id    String[]  @db.ObjectId
  user      Users    @relation(fields: [user_id], references: [id])
  projectId String  @db.ObjectId
  project   Projects @relation(fields: [projectId], references: [id])
 
}

model Clients {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  projects       Projects[]
  company_name   String
  company_logo   String?
  working_hours  String[]
  email          String?
  contact_number String?
  linkedin_link  String?
  location       String?
  company_hist   String[]
  created_at     DateTime   @default(now())
  updated_at     DateTime   @default(now())

  users Users[]

  @@map("clients")
}

model Notes {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userNoteId  String   @db.ObjectId
  userNote    Users    @relation(fields: [userNoteId], references: [id])
  projectId   String[] @db.ObjectId
  // project      Projects  @relation(fields: [projectId], references: [id])
  title       String
  description String?
  github_link String?
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())

  @@map("notes")
}

model Levels {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  created_by String?     @db.ObjectId
  created_at DateTime    @default(now())
  updated_by String?     @db.ObjectId
  updated_at DateTime    @default(now())
  Threshold  Threshold[]
}

model Threshold {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  levelID    String   @db.ObjectId
  levels     Levels   @relation(fields: [levelID], references: [id])
  threshold  Int
  created_by String?
  created_at DateTime @default(now())
  updated_by String?
  updated_at DateTime @default(now())
}

model Points {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  point      Int
  created_by String?
  created_at DateTime @default(now())
  updated_by String?
  updated_at DateTime @default(now())
  Users      Users?   @relation(fields: [userId], references: [id])
}

enum RoleTypeEnum {
  MENTOR
  INTERN
}

enum UserTypeEnum {
  ADMIN
  USER
  APPLICANT
  DENIED
}

enum PriorityLevelEnum {
  LOW
  MEDIUM
  HIGH
}
