// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Users {
  id                String            @id @default(uuid()) @map("_id")
  name              String
  short_bio         String?
  image_icon        String?
  address           String
  email_address     String
  phone_no          String?
  github_link       String?
  fb_link           String?
  linkedin_link     String?
  whatsapp_link     String?
  skype_link        String?
  telegram_link     String?
  portfolio_website String
  tech_stacks       String[]
  addtl_skills      String[]
  password          String
  created_at        DateTime          @default(now())
  updated_at        DateTime          @default(now())
  schedule          String
  position          String[]
  roleType          RoleTypeEnum      @default(INTERN)
  userType          UserTypeEnum      @default(USER)
  work_experience   Work_Experience[]
  org_chart         org_chart[]
  // test time_logs, todo_list
  time_logs         time_logs[]
  todo_list         todo_list[]
  UserProjects      UserProjects[]
  clients           UserClients[]
  Notes             Notes[]

  @@unique([email_address])
}

model Work_Experience {
  id         String   @id @default(uuid()) @map("_id")
  user_id    String
  users      Users    @relation(fields: [user_id], references: [id])
  position   String
  company    String
  date       String
  short_desc String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  profile    Profile? @relation(fields: [profileId], references: [id])
  profileId  String?  @db.ObjectId
}

model org_chart {
  id            String        @id @default(uuid()) @map("_id")
  userId        String        @unique
  user          Users         @relation(fields: [userId], references: [id])
  level         Int           @unique
  org_hierarchy Org_Hierarchy @relation(fields: [level], references: [level])
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @default(now()) @map("updated_at")
  profile       Profile?      @relation(fields: [profileId], references: [id])
  profileId     String?       @db.ObjectId
}

model Org_Hierarchy {
  id        String      @id @default(uuid()) @map("_id")
  level     Int         @unique
  position  String
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @default(now()) @map("updated_at")
  org_chart org_chart[]
}

model time_logs {
  id                 String    @id @default(uuid()) @map("_id")
  usersId            String
  user               Users     @relation(fields: [usersId], references: [id])
  time_in            DateTime?
  time_out           DateTime?
  total_worked_hours Int?
  total_late_hours   Int?
  total_ot_time      Int?
  scheduled_time_in  DateTime?
  scheduled_time_out DateTime?
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @default(now()) @map("updated_at")
  profile            Profile?  @relation(fields: [profileId], references: [id])
  profileId          String?   @db.ObjectId
}

model todo_list {
  id               String            @id @default(uuid()) @map("_id")
  title            String
  subheader        String
  full_description String
  tags             TodoTags[]
  users_id         String            @unique
  users            Users             @relation(fields: [users_id], references: [id])
  project_id       String?           @unique
  projects         Projects?         @relation(fields: [project_id], references: [id])
  prio_level       PriorityLevelEnum
  github_link      String
  created_at       DateTime          @default(now())
  updated_at       DateTime          @default(now())
  profile          Profile?          @relation(fields: [profileId], references: [id])
  profileId        String?           @db.ObjectId
}

model Tags {
  id         String     @id @default(uuid()) @map("_id")
  tag        String     @unique
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now())
  todo_list  TodoTags[]
}

model TodoTags {
  id        String    @id @default(uuid()) @map("_id")
  todo_id   String
  todo_list todo_list @relation(fields: [todo_id], references: [id])
  tag_id    String
  tags      Tags      @relation(fields: [tag_id], references: [id])
}

model Projects {
  id           String        @id @default(uuid()) @map("_id")
  clientsId    String
   Clients      Clients       @relation(fields: [clientsId], references: [id])
  project_name String
  github_link  String
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @default(now()) @map("updated_at")
  todo_list    todo_list[]
  UserProjects UserProjects?
   Notes        Notes?
}

model UserProjects {
  id        String   @id @default(uuid()) @map("_id")
  userId    String[]  
  user      Users    @relation(fields: [userId], references: [id])
  projectId String   @unique
  project   Projects @relation(fields: [projectId], references: [id])
  profile   Profile? @relation(fields: [profileId], references: [id])
  profileId String?  @db.ObjectId
}

model Clients {
  id             String        @id @default(uuid()) @map("_id")
  company_name   String
  company_logo   String?
  working_hours  String[]
  email          String?
  contact_number String?
  linkedin_link  String?
  location       String?
  company_hist   String[]
  created_at     DateTime      @default(now())
  updated_at     DateTime      @default(now())
  project_list   String[]
  projects       Projects[]
  user           UserClients[]
}

model Notes {
  id          String   @id @default(uuid()) @map("_id")
  user_id     String   @unique
  user        Users    @relation(fields: [user_id], references: [id])
  project_id  String   @unique
  project     Projects @relation(fields: [project_id], references: [id])
  title       String
  description String?
  github_link String?
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())
}

model UserClients {
  id        String   @id @default(uuid()) @map("_id")
  userId    String   @unique
  users     Users    @relation(fields: [userId], references: [id])
  clientId  String   @unique
  client    Clients  @relation(fields: [clientId], references: [id])
  profile   Profile? @relation(fields: [profileId], references: [id])
  profileId String?  @db.ObjectId
}

enum RoleTypeEnum {
  MENTOR
  INTERN
}

enum UserTypeEnum {
  ADMIN
  USER
}

enum PriorityLevelEnum {
  LOW
  MEDIUM
  HIGH
}

model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  googleId      String
  name          String?
  email         String?
  emailVerified Boolean? @map("email_verified")
  image         String?
  provider      String?
  google        Json?
  profile       Profile?

  // @@unique([email])
  @@unique([googleId])
  @@map("users")
}

model Profile {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  userId            String            @map("user_id") @db.ObjectId
  email             String?
  gender            String?
  short_bio         String?
  image_icon        String?
  address           String?
  phone_no          String?
  github_link       String?
  fb_link           String?
  linkedin_link     String?
  whatsapp_link     String?
  skype_link        String?
  telegram_link     String?
  portfolio_website String?
  tech_stacks       String[]
  addtl_skills      String[]
  schedule          String?
  position          String?
  roleType          RoleTypeEnum      @default(INTERN)
  userType          UserTypeEnum      @default(USER)
  work_experience   Work_Experience[]
  org_chart         org_chart[]
  // test time_logs, todo_list
  time_logs         time_logs[]
  todo_list         todo_list[]
  UserProjects      UserProjects[]
  clients           UserClients[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@unique([email])
  @@map("profile")
}
