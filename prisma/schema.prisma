// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Users {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  short_bio         String?
  image_icon        String?
  address           String?
  email_address     String?
  phone_no          String?
  github_link       String?
  fb_link           String?
  linkedin_link     String?
  whatsapp_link     String?
  skype_link        String?
  telegram_link     String?
  portfolio_website String?
  tech_stacks       String[]
  addtl_skills      String[]
  password          String
  created_at        DateTime          @default(now())
  updated_at        DateTime          @default(now())
  schedule          String?
  position          String[]
  roleType          RoleTypeEnum      @default(INTERN)
  userType          UserTypeEnum      @default(APPLICANT)
  work_experience   Work_Experience[]
  org_chart         org_chart[]

  // test time_logs, todo_list
  time_logs time_logs[]
  todo_list todo_list[]
  projects  UserProjects[]
  clients   UserClients[]
  notes     Notes[]
  profileId String?        @db.ObjectId
  Profile   Profile?       @relation(fields: [profileId], references: [id])

  @@unique([email_address])
}

model Work_Experience {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userWorkExp   Users    @relation(fields: [userWorkExpId], references: [id])
  userWorkExpId String   @db.ObjectId
  position      String
  company       String
  date          String
  short_desc    String
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now())
  profile       Profile? @relation(fields: [profileId], references: [id])
  profileId     String?  @db.ObjectId
}

model org_chart {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  userOrgChart   Users         @relation(fields: [userOrgChartId], references: [id])
  userOrgChartId String        @db.ObjectId
  level          Int           @unique
  org_hierarchy  Org_Hierarchy @relation(fields: [level], references: [level])
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @default(now()) @map("updated_at")
  profile        Profile?      @relation(fields: [profileId], references: [id])
  profileId      String?       @db.ObjectId
}

model Org_Hierarchy {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  level     Int         @unique
  position  String
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @default(now()) @map("updated_at")
  org_chart org_chart[]
}

model time_logs {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  userTimeLog        Users     @relation(fields: [userTimeLogId], references: [id])
  userTimeLogId      String    @db.ObjectId
  time_in            DateTime?
  time_out           DateTime?
  total_worked_hours Int?
  total_late_hours   Int?
  total_ot_time      Int?
  scheduled_time_in  DateTime?
  scheduled_time_out DateTime?
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @default(now()) @map("updated_at")
  profile            Profile?  @relation(fields: [profileId], references: [id])
  profileId          String?   @db.ObjectId
}

model todo_list {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  subheader        String?
  full_description String?
  userTodo         Users             @relation(fields: [userTodoId], references: [id])
  userTodoId       String            @db.ObjectId
  project_id       String            @db.ObjectId
  projects         Projects?         @relation(fields: [project_id], references: [id])
  prio_level       PriorityLevelEnum
  github_link      String?
  created_at       DateTime          @default(now())
  updated_at       DateTime          @default(now())
  Tags             Tags[]
  profile          Profile?          @relation(fields: [profileId], references: [id])
  profileId        String?           @db.ObjectId
  todoTags         TodoTags[]
}

model Tags {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  tag        String
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now())
  todos      todo_list  @relation(fields: [todoTagId], references: [id])
  todoTagId  String     @db.ObjectId
  todoLists  TodoTags[]
}

model TodoTags {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  todoList   todo_list @relation(fields: [todoListId], references: [id])
  todoListId String    @db.ObjectId
  tags       Tags      @relation(fields: [tagId], references: [id])
  tagId      String    @db.ObjectId
  assignedAt DateTime  @default(now())
  assignedBy String

  @@unique([todoListId, tagId])
}

model Projects {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  clientsId    String         @db.ObjectId
  Clients      Clients?       @relation(fields: [clientsId], references: [id])
  project_name String
  github_link  String
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @default(now()) @map("updated_at")
  todo_list    todo_list[]
  users        UserProjects[]
  Notes        Notes?
}

model UserProjects {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user       Users    @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId
  project    Projects @relation(fields: [projectId], references: [id])
  projectId  String   @db.ObjectId
  profile    Profile  @relation(fields: [profileId], references: [id])
  profileId  String   @db.ObjectId
  assignedAt DateTime @default(now())
  assignedBy String

  @@unique([userId, projectId, profileId])
}

model Clients {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  company_name   String
  company_logo   String?
  working_hours  String[]
  email          String?
  contact_number String?
  linkedin_link  String?
  location       String?
  company_hist   String[]
  created_at     DateTime      @default(now())
  updated_at     DateTime      @default(now())
  project_list   String[]
  projects       Projects[]
  users          UserClients[]
}

model Notes {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userNote    Users    @relation(fields: [userNoteId], references: [id])
  userNoteId  String   @db.ObjectId
  project     Projects @relation(fields: [projectId], references: [id])
  projectId   String   @unique @db.ObjectId
  title       String
  description String?
  github_link String?
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())
}

model UserClients {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      Users    @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  client    Clients  @relation(fields: [clientId], references: [id])
  clientId  String   @db.ObjectId
  profile   Profile? @relation(fields: [profileId], references: [id])
  profileId String?  @db.ObjectId

  @@unique([userId, clientId, profileId])
}

enum RoleTypeEnum {
  MENTOR
  INTERN
}

enum UserTypeEnum {
  ADMIN
  USER
  APPLICANT
}

enum PriorityLevelEnum {
  LOW
  MEDIUM
  HIGH
}

model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  googleId      String
  name          String?
  email         String?
  emailVerified Boolean? @map("email_verified")
  image         String?
  provider      String?
  google        Json?
  profile       Profile?

  // @@unique([email])
  @@unique([googleId])
  @@map("users")
}

model Profile {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  userId            String            @map("user_id") @db.ObjectId
  email             String?
  gender            String?
  short_bio         String?
  image_icon        String?
  address           String?
  phone_no          String?
  github_link       String?
  fb_link           String?
  linkedin_link     String?
  whatsapp_link     String?
  skype_link        String?
  telegram_link     String?
  portfolio_website String?
  tech_stacks       String[]
  addtl_skills      String[]
  schedule          String?
  position          String?
  roleType          RoleTypeEnum      @default(INTERN)
  userType          UserTypeEnum      @default(USER)
  work_experience   Work_Experience[]
  org_chart         org_chart[]
  // test time_logs, todo_list
  time_logs         time_logs[]
  todo_list         todo_list[]
  UserProjects      UserProjects[]
  clients           UserClients[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  user  User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Users Users[]

  @@unique([userId])
  @@unique([email])
  @@map("profile")
}
